# O Amin ------------------------
# |             |               |
# O Wasim       O Nick          O Mike
# |
# O Imran
# |
# O Faras

def bfs(graph,start):
    visited = []
    queue = []
    queue = [start]
    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            neighbours = graph[node]
            for neighbour in neighbours:
                queue.append(neighbour)
    return visited

graph = {'Amin' : ['Wasim', 'Nick', 'Mike'],
         'Wasim': ['Imran', 'Amin'],
         'Imran': ['Wasim', 'Faras'],
         'Faras': ['Imran'],
         'Mike': ['Amin'],
         'Nick': ['Amin']}

print(bfs(graph,'Amin'))
===========================================================================================
# O Amin ------------------------
# |             |               |
# O Wasim       O Nick          O Mike
# |
# O Imran
# |
# O Faras

def bfs(graph,start):
    visited = []
    queue = []
    queue = [start]
    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            neighbours = graph[node]
            for neighbour in neighbours:
                queue.append(neighbour)
    return visited

graph = {'Amin' : ['Wasim', 'Nick', 'Mike'],
         'Wasim': ['Imran', 'Amin'],
         'Imran': ['Wasim', 'Faras'],
         'Faras': ['Imran'],
         'Mike': ['Amin'],
         'Nick': ['Amin']}

print(bfs(graph,'Wasim'))
===========================================================================================
# O Amin ------------------------
# |             |               |
# O Wasim       O Nick          O Mike
# |
# O Imran
# |
# O Faras

def bfs(graph,start):
    visited = []
    queue = []
    queue = [start]
    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            neighbours = graph[node]
            for neighbour in neighbours:
                queue.append(neighbour)
    return visited

graph = {'Amin' : ['Wasim', 'Nick', 'Mike'],
         'Wasim': ['Imran', 'Amin'],
         'Imran': ['Wasim', 'Faras'],
         'Faras': ['Imran'],
         'Mike': ['Amin'],
         'Nick': ['Amin']}

print(bfs(graph,'Faras'))
===========================================================================================
# O Amin ------------------------
# |             |               |
# O Wasim       O Nick          O Mike
# |
# O Imran
# |
# O Faras

def bfs(graph,start):
    visited = []
    queue = []
    queue = [start]
    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            neighbours = graph[node]
            for neighbour in neighbours:
                queue.append(neighbour)
    return visited

graph={'Rektor' : {'Warek1', 'Warek2'},
       'Warek1' : {'Rektor'},
       'Warek2' : {'Rektor','Kaprodi1', 'Kaprodi2','Kaprodi3'},
       'Kaprodi1' : {'Warek2','Dosen A','Dosen B','Dosen C'},
       'Dosen A' : {'Kaprodi1'},
       'Dosen B' : {'Kaprodi1'},
       'Dosen C' : {'Kaprodi1'},
       'Kaprodi2' : {'Warek2','Dosen D','Dosen E'},
       'Dosen D' : {'Kaprodi2'},
       'Dosen E' : {'Kaprodi2'},
       'Kaprodi3' : {'Warek2','Dosen F','Dosen G'},
       'Dosen F': {'Kaprodi3'},
       'Dosen G' : {'Kaprodi3'}}

print(bfs(graph, 'Rektor'))
===========================================================================================
# O Amin ------------------------
# |             |               |
# O Wasim       O Nick          O Mike
# |
# O Imran
# |
# O Faras

def bfs(graph,start):
    visited = []
    queue = []
    queue = [start]
    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            neighbours = graph[node]
            for neighbour in neighbours:
                queue.append(neighbour)
    return visited

graph={'Rektor' : {'Warek1', 'Warek2'},
       'Warek1' : {'Rektor'},
       'Warek2' : {'Rektor','Kaprodi1', 'Kaprodi2','Kaprodi3'},
       'Kaprodi1' : {'Warek2','Dosen A','Dosen B','Dosen C'},
       'Dosen A' : {'Kaprodi1'},
       'Dosen B' : {'Kaprodi1'},
       'Dosen C' : {'Kaprodi1'},
       'Kaprodi2' : {'Warek2','Dosen D','Dosen E'},
       'Dosen D' : {'Kaprodi2'},
       'Dosen E' : {'Kaprodi2'},
       'Kaprodi3' : {'Warek2','Dosen F','Dosen G'},
       'Dosen F': {'Kaprodi3'},
       'Dosen G' : {'Kaprodi3'}}

print(bfs(graph, 'Dosen B'))
===========================================================================================
# O Amin ------------------------
# |             |               |
# O Wasim       O Nick          O Mike
# |
# O Imran
# |
# O Faras

def bfs(graph,start):
    visited = []
    queue = []
    queue = [start]
    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            neighbours = graph[node]
            for neighbour in neighbours:
                queue.append(neighbour)
    return visited

graph={'Rektor' : {'Warek1', 'Warek2'},
       'Warek1' : {'Rektor'},
       'Warek2' : {'Rektor','Kaprodi1', 'Kaprodi2','Kaprodi3'},
       'Kaprodi1' : {'Warek2','Dosen A','Dosen B','Dosen C'},
       'Dosen A' : {'Kaprodi1'},
       'Dosen B' : {'Kaprodi1'},
       'Dosen C' : {'Kaprodi1'},
       'Kaprodi2' : {'Warek2','Dosen D','Dosen E'},
       'Dosen D' : {'Kaprodi2'},
       'Dosen E' : {'Kaprodi2'},
       'Kaprodi3' : {'Warek2','Dosen F','Dosen G'},
       'Dosen F': {'Kaprodi3'},
       'Dosen G' : {'Kaprodi3'}}

print(bfs(graph, 'Kaprodi2'))
===========================================================================================
def dfs(graph, start, visited=None):
  if visited is None:
    visited = set()
  visited.add(start)
  print(start)
  for next in graph[start] - visited:
    dfs(graph, next, visited)
  return visited
 graph={ 'Amin' : {'Wasim', 'Nick', 'Mike'},
       'Wasim' : {'Imran', 'Amin'},
       'Imran' : {'Wasim','Faras'},
       'Faras' : {'Imran'},
       'Mike' : {'Amin'},
       'Nick' : {'Amin'}}
  dfs(graph, 'Nick')
===========================================================================================
graph={'Rektor' : {'Warek1', 'Warek2'},
       'Warek1' : {'Rektor'},
       'Warek2' : {'Rektor','Kaprodi1', 'Kaprodi2','Kaprodi3'},
       'Kaprodi1' : {'Warek2','Dosen A','Dosen B','Dosen C'},
       'Dosen A' : {'Kaprodi1'},
       'Dosen B' : {'Kaprodi1'},
       'Dosen C' : {'Kaprodi1'},
       'Kaprodi2' : {'Warek2','Dosen D','Dosen E'},
       'Dosen D' : {'Kaprodi2'},
       'Dosen E' : {'Kaprodi2'},
       'Kaprodi3' : {'Warek2','Dosen F','Dosen G'},
       'Dosen F': {'Kaprodi3'},
       'Dosen G' : {'Kaprodi3'}}

dfs(graph, 'Rektor')
===========================================================================================
# O Amin ------------------------
# |             |               |
# O Wasim       O Nick          O Mike
# |
# O Imran
# |
# O Faras

def bfs(graph,start):
    visited = []
    queue = []
    queue = [start]
    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            neighbours = graph[node]
            for neighbour in neighbours:
                queue.append(neighbour)
    return visited

graph = { '0': ['9', '7', '11'],
          '9': ['0', '10', '8'],
          '7': ['0', '11', '3', '6'],
          '11': ['0', '7'],
          '10': ['9', '1'],
          '8': ['9', '1', '12'],
          '1': ['10', '8'],
          '12': ['8', '2'],
          '3': ['7', '2', '4'],
          '6': ['7', '5'],
          '2': ['12', '3'],
          '4': ['3'],
          '5': ['6']}

print(bfs(graph, '0'))
===========================================================================================
# O Amin ------------------------
# |             |               |
# O Wasim       O Nick          O Mike
# |
# O Imran
# |
# O Faras

def bfs(graph,start):
    visited = []
    queue = []
    queue = [start]
    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            neighbours = graph[node]
            for neighbour in neighbours:
                queue.append(neighbour)
    return visited

graph = { '0': ['9', '7', '11'],
          '9': ['0', '10', '8'],
          '7': ['0', '11', '3', '6'],
          '11': ['0', '7'],
          '10': ['9', '1'],
          '8': ['9', '1', '12'],
          '1': ['10', '8'],
          '12': ['8', '2'],
          '3': ['7', '2', '4'],
          '6': ['7', '5'],
          '2': ['12', '3'],
          '4': ['3'],
          '5': ['6']}

print(bfs(graph, '0'))
